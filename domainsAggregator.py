from domain import Domain
from Loggers.ilogger import ILogger


class DomainsAggregator:

    # _loggers: []      Loggers list

    def __init__(self):
        self._loggers = []

    def add_logger(self, logger: ILogger):
        self._loggers.append(logger)

    def aggregate(self, domain_name: str, domain_enumerators: []) -> []:

        dic = {}

        for enumerator in domain_enumerators:
            domains = enumerator.find_subdomains(domain_name)

            for currDomain in domains:
                curr_domain_name = currDomain.get_name()
                ip_addresses = currDomain.get_ip_addresses()

                if curr_domain_name in dic:
                    dic[curr_domain_name].add_ip_addresses(ip_addresses)
                else:
                    new_domain = Domain(curr_domain_name)
                    new_domain.add_ip_addresses(ip_addresses)
                    dic[curr_domain_name] = new_domain

        for domain in dic.values():
            for logger in self._loggers:
                logger.log(str(domain))

        return dic.values()
